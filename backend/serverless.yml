service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_USER_INDEX: TodosUserIndex

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

functions:

#  Auth:
#    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          request:
            schema:
              application/json: ${file(src/models/create-todo-request.json)}

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: put
          path: todos/{todoId}
          cors: true
          request:
            schema:
              application/json: ${file(src/models/update-todo-request.json)}

#  # TODO: Configure this function
#  DeleteTodo:
#    handler: src/lambda/http/deleteTodo.handler
#    events:
#      - http:
#          method: delete
#          path: todos/{todoId}
#          cors: true
#
#  # TODO: Configure this function
#  GenerateUploadUrl:
#    handler: src/lambda/http/generateUploadUrl.handler
#    events:
#      - http:
#          method: post
#          path: todos/{todoId}/attachment
#          cors: true

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId  # partitionKey
            AttributeType: S
          - AttributeName: createdAt  # sortKey
            AttributeType: S
          - AttributeName: userId  # indexKey
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_USER_INDEX}
            KeySchema:
              - AttributeName: todoId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    # TODO: Add any necessary AWS resources